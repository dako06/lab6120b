/*	Author: Dakota Heredia
 *  	Partner(s) Name: 
 *	Lab Section: 023
 *	Assignment: Lab #6  Exercise #3
 *	Exercise Description: [optional - include for your own benefit]
 *
 *	I acknowledge all content contained herein, excluding template or example
 *	code, is my own original work.
 *
 *	Demo Link: https://drive.google.com/file/d/15uu15jlnhd1wtYStLq18tI3vot6v5Zya/view?usp=sharing 
 *
 */
#include <avr/io.h>
#ifdef _SIMULATE_
#include "simAVRHeader.h"
#endif
#include <avr/interrupt.h>


volatile unsigned char TimerFlag = 0;
unsigned long _avr_timer_M = 1;
unsigned long _avr_timer_cntcurr = 0;


void TimerOn() {
	/*AVR timer/counter controller reg TCCR1*/
	TCCR1B = 0x0B; //needs 
	
	/*AVR output compare reg*/
	OCR1A = 125; // needs 
	
	/* AVR timer interrupt mask reg*/
	TIMSK1 = 0x02; // needs
	
	/*initialize avr counter*/
	TCNT1 = 0; 
	
	_avr_timer_cntcurr = _avr_timer_M ;
	/*TimerISR called every _avr_timer_cntcurr ms*/
	
	/* enable global interrupts*/
	SREG |= 0x80;
}

void TimerOff() {
	TCCR1B = 0x00; // timer off
}

void TimerISR() {
	TimerFlag = 1;
}

ISR(TIMER1_COMPA_vect) {
	/*CPU automatically calls when TCNT1 == OCR1A*/
	_avr_timer_cntcurr--; // count down to zero
	if (_avr_timer_cntcurr == 0) {
		TimerISR(); 
		_avr_timer_cntcurr = _avr_timer_M;
	}
}

/*set TimerISR() to tick every M ms*/
void TimerSet(unsigned long M) {
	_avr_timer_M = M;
	_avr_timer_cntcurr = _avr_timer_M;
}



enum States {start, wait, inc, dec, clr}  state;
unsigned char CNT = 0;
unsigned char tmp = 0;
unsigned char tmp2 = 0;

void Tick() {

/*state transitions*/
switch(state) {
	
	case start:
	state = wait;
	break;
	
	case wait:
	
	tmp = ~PINA & 0x03;
	tmp2 = PINB & 0x0F;
	if (tmp==0x01) {
		if (tmp2 < 0x09) {
			++tmp2; 
		}	
	PORTB = tmp2;
	state = inc;
	}	

	else if (tmp==0x02) {
		if (tmp2 > 0x00) {
			--tmp2;
		}	
	PORTB = tmp2;
	state = dec;
	}

	else if (tmp==0x03) {
		PORTB = 0x00;
		state = clr;
	}

	else {
	state = wait;
	}

	break;

        case inc:
	tmp = ~PINA & 0x03;
	tmp2 = PINB & 0x0F;
	if (tmp==0x01) {
		state = inc;
		if (CNT < 10) {
			CNT ++;
		}
		else if ((CNT == 10) && (tmp2 < 0x09)) {	
			tmp2++; 
			CNT = 0;
			PORTB = tmp2;
		}
	}	

	else if (tmp==0x00) {
 		state = wait;
		CNT = 0;
	}
        break;

	case dec:
        	tmp = ~PINA & 0x03;
		tmp2 = PINB & 0x0F;
		if (tmp==0x02) {
                	state = dec;
                	if (CNT < 10) {
                        	CNT ++;
			}
                	else if ((CNT == 10) && (tmp2 > 0x00)) {
                        	tmp2--; 
				CNT = 0;
				PORTB = tmp2;
			}
        	}

        else if (tmp==0x00) {
                state = wait;
                CNT = 0;
        }

        break;

 
	case clr:
	state = wait;
	break;
	
}
/* state actions*/
switch(state) {

	case start:
	break;

	case wait:
	break;

        case inc:
        break;

        case dec:
        break;

	case clr:
        PORTB = 0x00;
	break;

	}
}

void main() {

DDRA = 0x00; PORTA = 0xFF; //A initialized to inp and set to 1
DDRB = 0xFF; PORTB = 0x00; //B initialized to outp and set to 0
TimerSet(100);
TimerOn();
PORTB = 0x07;
state = start;
    while (1) {

           Tick();
	   while (!TimerFlag) {}
	   TimerFlag = 0;
	  	}


}

